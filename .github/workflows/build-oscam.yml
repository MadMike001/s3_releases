name: Build OSCam for Dreambox ARM (ICAM+EMU+Hexdump)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Repository klonen
        uses: actions/checkout@v3

      - name: 📥 OSCam-Quellcode (ICAM/EMU) klonen
        run: |
          git clone https://github.com/oscam-emu/oscam-patched.git oscam
          cd oscam
          git checkout master  # Oder "icam" falls verfügbar

      - name: 🐳 Docker ARM Crossbuilder vorbereiten
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static docker

      - name: 🏗️ Kompilieren mit Docker (ARM OE2.5 Umgebung)
        run: |
          docker run --rm -v ${{ github.workspace }}:/build \
            -w /build/oscam \
            multiarch/ubuntu-core:armhf-bionic bash -c "\
              apt-get update && \
              apt-get install -y build-essential libusb-1.0-0-dev libpcsclite-dev \
                                 libssl-dev cmake pkg-config xz-utils && \
              make allyesconfig && \
              echo 'CONFIG_LIBUSB=y' >> config.mak && \
              echo 'CONFIG_PCSC=y' >> config.mak && \
              echo 'CONFIG_SSL=y' >> config.mak && \
              echo 'CONFIG_HAVE_DVBAPI=y' >> config.mak && \
              echo 'CONFIG_STREAMRELAY=y' >> config.mak && \
              echo 'CONFIG_MODULE_WEBIF=y' >> config.mak && \
              echo 'CONFIG_ICAM=y' >> config.mak && \
              echo 'CONFIG_EMU=y' >> config.mak && \
              echo 'CONFIG_LOGHEXDUMP=y' >> config.mak && \
              make -j2"

      - name: 📦 OSCam Binary als Artifact speichern
        uses: actions/upload-artifact@v3
        with:
          name: oscam-dm920
          path: oscam/oscam
